/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/
#include <stdio.h>
#include <limits.h>
int is_little_endian() {
  // implement the code to return 1 when running on a little-endian machine
  // otherwise, return 0

  
  unsigned int i = 1;
  char *c = (char *)&i;
  if(c[0] ==1) {
    return 1;
  }else {
  return 0;
  }
}

// Problem 2.60
unsigned replace_byte(unsigned x, int i, unsigned char b) {
  // implement the code to replace a byte in an unsigned int
  //works, works great!
  
  unsigned mask = ((unsigned)0xff) <<(i <<3);
  unsigned target_byte = ((unsigned)b) <<(i <<3);
  return (x & ~mask) | target_byte;
  
 
}

// Problem 2.68
int lower_one_mask(int n) {
  // implement the code to return a bit mask with the least significant n bits set to 1

  int w = sizeof(n) <<3;
  return (unsigned)-1 >> (w-n);


}

// Problem 2.70

  // implement the code to return 1 when x can be represented with n bits
  // otherwise, return 0
  int fits_bits(int x, int n) {
    int w = sizeof(int) <<3;
    int offset_n = w-n;
    return (x <<offset_n>>offset_n) == x;
}

/* test code; do not modify */
int main() {
  int i, j;
  int values[] = {0x12AB34CD, 0xBEEF, 0xFEEDDEED};
  int bits[] = {0, 1, 9, 32};
  int fits[] = {15, 31, 65536};

  printf("is_little_endian returns %d\n", is_little_endian());

  for (i = 0; i < sizeof(values)/sizeof(values[0]); i++) {
	printf("replace_byte %x %d %d ==> %x\n", values[i], i, i, replace_byte(values[i], i, i));
  }

  for (i = 0; i < sizeof(bits)/sizeof(bits[0]); i++) {
	printf("lower_one_mask %d => %x\n", bits[i], lower_one_mask(bits[i]));
  }

  for (i = 0; i < sizeof(fits)/sizeof(fits[0]); i++) {
	for (j = 1; j <= 4; j++)
		printf("fits_bits %x %d => %d\n", fits[i], j << 3, fits_bits(fits[i], j << 3));
  }
  return 0;
}
